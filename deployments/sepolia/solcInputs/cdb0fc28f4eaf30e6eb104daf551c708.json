{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n//we want fund form some users\n//we want withdraw all Funded amount\n//we want modify a value\n\nimport \"./PriceConvertor.sol\";\n\ncontract FundMe {\n    using PriceConvertor for uint256;\n\n    uint256 MINIMUM_AMOUNT = 10 * 1e18; //10000000000000000000 wei = 10 $\n    address public i_owner;\n    address[] public funders;\n    mapping(address => uint256) public funderToAmount;\n    AggregatorV3Interface public priceFeed;\n\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    //fund\n    function fund() public payable {\n        require(\n            msg.value.getConversion(priceFeed) > MINIMUM_AMOUNT,\n            \"Didn't send enough\"\n        );\n        funders.push(msg.sender);\n        funderToAmount[msg.sender] += msg.value;\n    }\n\n    function withdraw() public onlyOwner {\n        for (uint256 funderIndex; funderIndex < funders.length; funderIndex++) {\n            address funder = funders[funderIndex];\n            funderToAmount[funder] += 0;\n        }\n\n        funders = new address[](0);\n\n        //Use call to transfer amount\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"call fail\");\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == i_owner, \"function sender is not owner\");\n        _;\n    }\n}\n"
    },
    "contracts/PriceConvertor.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.8;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConvertor {\r\n    function getPrice(\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\r\n        return uint256(answer * 1e10);\r\n    }\r\n\r\n    function getConversion(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPriceFeed = getPrice(priceFeed);\r\n        uint256 ethAmountUsd = (ethAmount * ethPriceFeed) / 1e18;\r\n        return ethAmountUsd;\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}